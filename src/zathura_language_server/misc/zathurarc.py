r"""Zathurarc
=============
"""
import os
import re
from gzip import decompress
from typing import Any

from markdown_it import MarkdownIt
from platformdirs import site_data_dir
from pypandoc import convert_text

from .._metainfo import SOURCE, project


def init_schema() -> dict[str, Any]:
    r"""Init schema.

    :rtype: dict[str, Any]
    """
    filetype = "zathurarc"
    schemas = {
        filetype: {
            "$id": f"{SOURCE}/blob/main/src/termux_language_server/assets/json/{filetype}.json",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "$comment": (
                "Don't edit this file directly! It is generated by "
                f"`{project} --generate-schema={filetype}`."
            ),
            "type": "object",
            "properties": {},
        }
    }
    with open(
        os.path.join(
            os.path.join(site_data_dir("man"), "man5"), "zathurarc.5.gz"
        ),
        "rb",
    ) as f:
        text = decompress(f.read()).decode()
    text = convert_text(text, "markdown", "man")
    md = MarkdownIt("commonmark", {})
    tokens = md.parse(text)
    indices = []
    end_index = len(tokens)
    for i, token in enumerate(tokens):
        if token.content == "OPTIONS":
            end_index = i
            break
        if token.tag == "h2" and token.type == "heading_open":
            indices += [i + 1]
    for i, index in enumerate(indices):
        keyword, _, description = tokens[index].content.partition(" - ")
        schemas[filetype]["properties"][keyword] = {
            "description": description,
            "type": "object",
        }
        if len(indices) - 1 == i:
            index2 = end_index
        else:
            index2 = indices[i + 1]
        for token in tokens[index + 1 : index2]:
            if token.content != "" and not token.content.startswith("<!--"):
                schemas[filetype]["properties"][keyword][
                    "description"
                ] += "\n" + re.sub(r"\n\s*", " ", token.content)
    schemas[filetype]["properties"]["include"]["type"] = "array"

    schemas[filetype]["properties"]["set"]["properties"] = {}
    indices = []
    for i, token in enumerate(tokens[end_index:], end_index):
        if token.content == "SEE ALSO":
            end_index = i
            break
        if (
            token.type == "inline"
            and token.content.islower()
            and token.content.startswith("***")
            and token.content.endswith("***")
        ):
            indices += [i]
    for i, index in enumerate(indices):
        keyword = tokens[index].content.strip("*")
        if len(indices) - 1 == i:
            index2 = end_index
        else:
            index2 = indices[i + 1]
        for token in tokens[index + 1 : index2]:
            if (
                token.content != ""
                and not token.content.startswith("<!--")
                and token.content != ":"
            ):
                if (
                    schemas[filetype]["properties"]["set"]["properties"]
                    .get(keyword, {})
                    .get("description")
                    is None
                ):
                    schemas[filetype]["properties"]["set"]["properties"][
                        keyword
                    ] = {"description": token.content.lstrip(": ")}
                    continue
                for line in token.content.splitlines():
                    if line.find("Value type: ") != -1:
                        _type = (
                            line.strip().partition("Value type: ")[2].lower()
                        )
                        schemas[filetype]["properties"]["set"]["properties"][
                            keyword
                        ]["type"] = {
                            "int": "integer",
                            "float": "number",
                            "bool": "boolean",
                        }.get(
                            _type, _type
                        )
                    elif line.find("Default value: ") != -1:
                        default = line.strip().partition("Default value: ")[2]
                        _type = schemas[filetype]["properties"]["set"][
                            "properties"
                        ][keyword]["type"]
                        if _type == "integer":
                            default = int(default.split(" ")[0])
                        elif _type == "number":
                            default = float(default)
                        elif _type == "boolean":
                            default = default == "true"
                        schemas[filetype]["properties"]["set"]["properties"][
                            keyword
                        ]["default"] = default
        schemas[filetype]["properties"]["set"]["properties"][keyword][
            "description"
        ] = schemas[filetype]["properties"]["set"]["properties"][keyword][
            "description"
        ].strip()

    return schemas
